{"version":3,"sources":["PlusButton/PlusButton.js","MinusButton/MinusButton.js","Labels/Labels.js","TimerInput/TimerInput.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["box","width","height","overflow","fontSize","padding","display","float","margin","background","color","PlusButton","count","increaseCount","style","onClick","MinusButton","decreaseCount","Labels","cb","renderTimers","id","label","map","index","className","key","TimerInput","props","type","value","onChange","newInput","required","lime","orange","blue","redgay","bluefish","App","updateCount","state","setState","clearInterval","myInterval","startTimer","timer","setInterval","stopTimer","resetClick","setCounter","time","times","getNewInput","event","console","log","target","bind","this","src","logo","alt","disabled","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"0SAGMA,G,KAAM,CACVC,MAAO,UACPC,OAAQ,UACRC,SAAU,SACVC,SAAU,OACVC,QAAS,OACTC,QAAS,QACTC,MAAO,OACPC,OAAQ,MACRC,WAAY,UACZC,MAAO,UAUMC,EAPI,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,cAC3B,OAEE,4BAAQC,MAAOd,EAAKe,QAAS,kBAAMF,EAAcD,EAAQ,MAAK,uCChB5DZ,EAAM,CACVC,MAAO,UACPC,OAAQ,UACRC,SAAU,SACVC,SAAU,OACVC,QAAS,OACTC,QAAS,QACTC,MAAO,OACPC,OAAQ,MACRC,WAAY,UACZC,MAAO,SAUMM,EAPK,SAAC,GAA8B,IAA5BJ,EAA2B,EAA3BA,MAAOK,EAAoB,EAApBA,cAC5B,OAEE,4BAAQH,MAAOd,EAAKe,QAAS,kBAAME,EAAcL,EAAQ,MAAK,uCC8BnDM,EA9CA,SAAC,GAAY,IAAVC,EAAS,EAATA,GAmCVC,EAjCS,CACb,CACEC,GAAI,EACJC,MAAO,QACPZ,MAAO,CAAED,WAAY,YAEvB,CACEY,GAAI,EACJC,MAAO,QACPZ,MAAO,CAAED,WAAY,YAEvB,CACEY,GAAI,EACJC,MAAO,SACPZ,MAAO,CAAED,WAAY,YAEvB,CACEY,GAAI,EACJC,MAAO,SACPZ,MAAO,CAAED,WAAY,YAEvB,CACEY,GAAI,EACJC,MAAO,SACPZ,MAAO,CAAED,WAAY,YAEvB,CACEY,GAAI,EACJC,MAAO,SACPZ,MAAO,CAAED,WAAY,aAIGc,KAAI,SAACD,EAAOE,GACtC,OAAO,4BAAQC,UAAU,SAASX,MAAOQ,EAAMZ,MAAOgB,IAAKF,EAAOT,QAAS,kBAAMI,EAAGG,EAAMD,MAAK,4BAAKC,EAAMA,OAAnG,QAGT,OACE,yBAAKG,UAAU,QACZL,IC7BQO,EAZI,SAACC,GAElB,OACE,yBAAKH,UAAU,UAAUX,MAAO,CAAEL,WAAY,YAC5C,qDACA,2BAAOK,MAAO,CAAEb,MAAO,GAAIC,OAAQ,IAAM2B,KAAK,SAASC,MAAOF,EAAME,MAAOC,SAAUH,EAAMI,SAAUC,UAAQ,IAC7G,6C,gBCCAC,EAAO,CAAEzB,WAAY,WACrB0B,EAAS,CAAE1B,WAAY,WACvB2B,EAAO,CAAE3B,WAAY,WACrB4B,EAAS,CAAE5B,WAAY,WACvB6B,EAAW,CAAE7B,WAAY,WAoKhB8B,E,YAhKb,WAAYX,GAAQ,IAAD,8BACjB,4CAAMA,KAURY,YAAc,WAAO,IAAD,EACO,EAAKC,MAAtB7B,EADU,EACVA,MAAOkB,EADG,EACHA,MAEXlB,EAAQ,GACV,EAAK8B,UAAS,kBAAgB,CAC5B9B,MADY,EAAGA,MACA,MAGL,IAAVA,IACY,IAAVkB,EACFa,cAAc,EAAKC,YAEnB,EAAKF,UAAS,kBAAgB,CAC5BZ,MADY,EAAGA,MACA,EACflB,MAAO,SAzBI,EA+BnBiC,WAAa,WACX,EAAKH,SAAS,CACZI,MAAOC,YAAY,EAAKP,YAAa,QAjCtB,EAqCnBQ,UAAY,WACVL,cAAc,EAAKF,MAAMK,OACzB,EAAKJ,SAAS,CACZI,MAAO,QAxCQ,EA4CnBG,WAAa,WACX,EAAKP,SAAS,CACZ9B,MAAO,EACPkB,MAAO,KA/CQ,EAmDnBoB,WAAa,SAAC1B,GACZ,IAAI2B,EACJ,OAAQ3B,GACN,KAAK,EACH2B,EAAO,EACP,MACF,KAAK,EACHA,EAAO,EACP,MACF,KAAK,EACHA,EAAO,GACP,MACF,KAAK,EACHA,EAAO,GACP,MACF,KAAK,EACHA,EAAO,GACP,MACF,KAAK,EACHA,EAAO,GACP,MACF,QAASA,EAAO,EAElB,IAAIC,EAAQD,EACZ,EAAKT,SAAS,CACZZ,MAAOsB,KA5EQ,EAgFnBC,YAAc,SAAAC,GACZC,QAAQC,IAAIF,GACZ,EAAKZ,SAAS,CACZZ,MAAOwB,EAAMG,OAAO3B,SAjFtB,EAAKW,MAAQ,CACX7B,MAAO,EACPkB,MAAO,EACPgB,MAAO,MAET,EAAKI,WAAa,EAAKA,WAAWQ,KAAhB,gBAPD,E,iFAuFE,IAAD,OAClBC,KAAKf,WAAaG,aAAY,WAAO,IAAD,EACT,EAAKN,MAAtB7B,EAD0B,EAC1BA,MAAOkB,EADmB,EACnBA,MAEXlB,EAAQ,GACV,EAAK8B,UAAS,kBAAgB,CAC5B9B,MADY,EAAGA,MACA,MAGL,IAAVA,IACY,IAAVkB,EACFa,cAAc,EAAKC,YAEnB,EAAKF,UAAS,kBAAgB,CAC5BZ,MADY,EAAGA,MACA,EACflB,MAAO,UAIZ,O,6CAIH+B,cAAcgB,KAAKf,c,+BAIX,IAAD,OAEP,OAEE,yBAAKnB,UAAU,gBACb,gCACE,qCACA,6BAASA,UAAU,YACjB,uCACA,wCAGJ,kBAAC,EAAD,CACEN,GAAIwC,KAAKT,aAGX,iCACE,wBAAIzB,UAAU,UAAUX,MAAOoB,GAA/B,mBACA,yBAAKT,UAAU,SAASX,MAAOuB,EAAQuB,IAAKC,IAAMC,IAAI,SACtD,yBAAKrC,UAAU,UAAUX,MAAOqB,EAAQyB,IAAKC,IAAMC,IAAI,SAEvD,6BAASrC,UAAU,WACjB,gCAAMkC,KAAKlB,MAAMX,MAAjB,IAAyB6B,KAAKlB,MAAM7B,MAAQ,GAAnB,WAA4B+C,KAAKlB,MAAM7B,OAAU+C,KAAKlB,MAAM7B,QAGvF,4BAAQa,UAAU,SAASX,MAAOsB,EAAMrB,QAAS4C,KAAKd,WAAYkB,SAAUJ,KAAKlB,MAAMK,OACrF,sCAEF,4BAAQrB,UAAU,SAASX,MAAOwB,EAAUvB,QAAS4C,KAAKX,UAAWe,UAAWJ,KAAKlB,MAAMK,OACzF,qCAEF,4BAAQrB,UAAU,SAASX,MAAOoB,EAAMnB,QAAS4C,KAAKV,YACpD,sCAEF,kBAAC,EAAD,CAAYrC,MAAO+C,KAAKlB,MAAM7B,MAAOC,cAAe,SAACD,GAAD,OAAW,EAAK8B,SAAS,CAAE9B,aAC/E,kBAAC,EAAD,CAAaA,MAAO+C,KAAKlB,MAAM7B,MAAOK,cAAe,SAACL,GAAD,OAAW,EAAK8B,SAAS,CAAE9B,aAChF,kBAAC,EAAD,CACEoB,SAAU2B,KAAKN,cAEjB,yBAAK5B,UAAU,SAASX,MAAOuB,EAAQuB,IAAKC,IAAMC,IAAI,e,GA3J9CE,aCJEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,kBEnInBC,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.9c933ad8.chunk.js","sourcesContent":["import React from 'react';\nimport '../App.css';\n\nconst box = {\n  width: '137.5px',\n  height: '137.5px',\n  overflow: 'hidden',\n  fontSize: '13px',\n  padding: '10px',\n  display: 'block',\n  float: 'left',\n  margin: '5px',\n  background: '#e76022',\n  color: 'white'\n};\n\nconst PlusButton = ({ count, increaseCount }) => {\n  return (\n    // increment button adds 30 seconds to the remaining time\n    <button style={box} onClick={() => increaseCount(count + 30)}><h2>+ :30</h2></button>\n  )\n};\n\nexport default PlusButton;","import React from 'react';\nimport '../App.css';\n\nconst box = {\n  width: '137.5px',\n  height: '137.5px',\n  overflow: 'hidden',\n  fontSize: '13px',\n  padding: '10px',\n  display: 'block',\n  float: 'left',\n  margin: '5px',\n  background: '#dbb701',\n  color: 'white'\n};\n\nconst MinusButton = ({ count, decreaseCount }) => {\n  return (\n    // increment button subtracts 30 seconds to the remaining time\n    <button style={box} onClick={() => decreaseCount(count - 30)}><h2>- :30</h2></button>\n  )\n}\n\nexport default MinusButton;","import React from 'react';\nimport '../App.css';\n\nconst Labels = ({ cb }) => {\n\n  const timers = [\n    {\n      id: 1,\n      label: \"1 min\",\n      color: { background: '#e76022' }\n    },\n    {\n      id: 2,\n      label: \"5 min\",\n      color: { background: '#1E90FF' }\n    },\n    {\n      id: 3,\n      label: \"10 min\",\n      color: { background: '#DA312E' }\n    },\n    {\n      id: 4,\n      label: \"15 min\",\n      color: { background: '#dbb701' }\n    },\n    {\n      id: 5,\n      label: \"30 min\",\n      color: { background: '#d22a4e' }\n    },\n    {\n      id: 6,\n      label: \"60 min\",\n      color: { background: '#02b9e3' }\n    }\n  ];\n\n  const renderTimers = timers.map((label, index) => {\n    return <button className=\"AppBox\" style={label.color} key={index} onClick={() => cb(label.id)}><h2>{label.label}</h2> </button >\n  })\n\n  return (\n    <div className=\"Left\">\n      {renderTimers}\n    </div>\n  );\n};\n\nexport default Labels;","import React from 'react';\nimport '../App.css';\n\nconst TimerInput = (props) => {\n\n  return (\n    <div className=\"AppWide\" style={{ background: '#d22a4e' }}>\n      <h3>Input time in minutes</h3>\n      <input style={{ width: 50, height: 35 }} type=\"number\" value={props.value} onChange={props.newInput} required />\n      <h3>Press enter</h3>\n    </div>\n  )\n\n}\n\nexport default TimerInput;","import React, { Component } from 'react';\nimport './App.css';\nimport PlusButton from './PlusButton/PlusButton';\nimport MinusButton from './MinusButton/MinusButton';\nimport Labels from './Labels/Labels'\nimport TimerInput from './TimerInput/TimerInput'\nimport logo from './logo.svg';\n\n\n//! css\nconst lime = { background: '#61b812' };\nconst orange = { background: '#e76022' };\nconst blue = { background: '#1E90FF' };\nconst redgay = { background: '#DA312E' }\nconst bluefish = { background: '#02b9e3' }\n// const magenta = { background: '#d22a4e' }\nclass App extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      count: 0,\n      value: 0,\n      timer: null\n    }\n    this.setCounter = this.setCounter.bind(this);\n\n  }\n\n  updateCount = () => {\n    const { count, value } = this.state\n\n    if (count > 0) {\n      this.setState(({ count }) => ({\n        count: count - 1\n      }))\n    }\n    if (count === 0) {\n      if (value === 0) {\n        clearInterval(this.myInterval)\n      } else {\n        this.setState(({ value }) => ({\n          value: value - 1,\n          count: 59\n        }))\n      }\n    }\n  }\n\n  startTimer = () => {\n    this.setState({\n      timer: setInterval(this.updateCount, 1000)\n    });\n  };\n\n  stopTimer = () => {\n    clearInterval(this.state.timer);\n    this.setState({\n      timer: null\n    });\n  };\n\n  resetClick = () => {\n    this.setState({\n      count: 0,\n      value: 0\n    });\n  }\n\n  setCounter = (index) => {\n    let time;\n    switch (index) {\n      case 1:\n        time = 1;\n        break;\n      case 2:\n        time = 5;\n        break;\n      case 3:\n        time = 10;\n        break;\n      case 4:\n        time = 15;\n        break;\n      case 5:\n        time = 30;\n        break;\n      case 6:\n        time = 60;\n        break;\n      default: time = 0;\n    }\n    let times = time;\n    this.setState({\n      value: times\n    })\n  }\n\n  getNewInput = event => {\n    console.log(event)\n    this.setState({\n      value: event.target.value\n    });\n  }\n\n  componentDidMount() {\n    this.myInterval = setInterval(() => {\n      const { count, value } = this.state\n\n      if (count > 0) {\n        this.setState(({ count }) => ({\n          count: count - 1\n        }))\n      }\n      if (count === 0) {\n        if (value === 0) {\n          clearInterval(this.myInterval)\n        } else {\n          this.setState(({ value }) => ({\n            value: value - 1,\n            count: 59\n          }))\n        }\n      }\n    }, 1000)\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.myInterval)\n  }\n\n\n  render() {\n\n    return (\n\n      <div className=\"AppContainer\">\n        <header>\n          <h1>Start</h1>\n          <article className=\"AppRight\">\n            <h2>William</h2>\n            <h2>Fowler</h2>\n          </article>\n        </header>\n        <Labels\n          cb={this.setCounter}\n        />\n\n        <section>\n          <h2 className=\"AppWide\" style={lime}>React Timer Lab</h2>\n          <img className=\"AppBox\" style={redgay} src={logo} alt=\"logo\" />\n          <img className=\"AppWide\" style={orange} src={logo} alt=\"logo\" />\n\n          <article className=\"AppWide\">\n            <h1> {this.state.value}:{this.state.count < 10 ? `0${this.state.count}` : this.state.count}</h1>\n          </article>\n\n          <button className=\"AppBox\" style={blue} onClick={this.startTimer} disabled={this.state.timer}>\n            <h2>Start</h2>\n          </button>\n          <button className=\"AppBox\" style={bluefish} onClick={this.stopTimer} disabled={!this.state.timer}>\n            <h2>Stop</h2>\n          </button>\n          <button className=\"AppBox\" style={lime} onClick={this.resetClick}>\n            <h2>Reset</h2>\n          </button>\n          <PlusButton count={this.state.count} increaseCount={(count) => this.setState({ count })} />\n          <MinusButton count={this.state.count} decreaseCount={(count) => this.setState({ count })} />\n          <TimerInput\n            newInput={this.getNewInput}\n          />\n          <img className=\"AppBox\" style={redgay} src={logo} alt=\"logo\" />\n        </section>\n      </div>\n    )\n  }\n}\n\nexport default App;\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";"],"sourceRoot":""}